#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2//video/video.hpp"
#include "opencv2/video/background_segm.hpp"

#include <iostream>
#include <sstream>
#include <stdio.h>

using namespace std;
using namespace cv;

/// Global Variables
//global variables
Mat frame; //current frame
Mat fgMaskMOG; //fg mask generated by MOG method
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
BackgroundSubtractorMOG MOG;
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard;

//function declarations
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);

void help()
{
	cout
		<< "--------------------------------------------------------------------------" << endl
		<< "This program shows how to use background subtraction methods provided by " << endl
		<< " OpenCV. You can process both videos (-vid) and images (-img)." << endl
		<< endl
		<< "Usage:" << endl
		<< "./bs {-vid <video filename>|-img <image filename>}" << endl
		<< "for example: ./bs -vid video.avi" << endl
		<< "or: ./bs -img /data/images/1.png" << endl
		<< "--------------------------------------------------------------------------" << endl
		<< endl;
}





int main(int argc, char* argv[])
{
	//print help information
	help();

	//check for the input parameter correctness
	if (argc != 3) {
		cerr << "Incorret input list" << endl;
		cerr << "exiting..." << endl;
		return EXIT_FAILURE;
	}

	//create GUI windows
	namedWindow("Frame");
	namedWindow("FG Mask MOG");
	namedWindow("FG Mask MOG 2");

	//create Background Subtractor objects
	//NOTE HERE!!!!
	pMOG = new BackgroundSubtractorMOG(); //MOG approach
	pMOG2 = new BackgroundSubtractorMOG2(); //MOG2 approach

	if (strcmp(argv[1], "-vid") == 0) {
		//input data coming from a video
		processVideo(argv[2]);
	}
	else if (strcmp(argv[1], "-img") == 0) {
		//input data coming from a sequence of images
		processImages(argv[2]);
	}
	else {
		//error in reading input parameters
		cerr << "Please, check the input parameters." << endl;
		cerr << "Exiting..." << endl;
		return EXIT_FAILURE;
	}
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

void processVideo(char* videoFilename) {
	//create the capture object
	VideoCapture capture(videoFilename);
	if (!capture.isOpened()){
		//error in opening the video input
		cerr << "Unable to open video file: " << videoFilename << endl;
		exit(EXIT_FAILURE);
	}
	//read input data. ESC or 'q' for quitting
	while ((char)keyboard != 'q' && (char)keyboard != 27){
		//read the current frame
		if (!capture.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
		//update the background model
		//AND HERE!!!
		pMOG->operator()(frame, fgMaskMOG, 0.1);
		pMOG2->operator()(frame, fgMaskMOG2, 0.1);
		//get the frame number and write it on the current frame
		stringstream ss;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		ss << capture.get(CV_CAP_PROP_POS_FRAMES);
		string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);
	}
	//delete capture object
	capture.release();
}

void processImages(char* fistFrameFilename) {
	//read the first file of the sequence
	frame = imread(fistFrameFilename);
	if (!frame.data){
		//error in opening the first image
		cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
		exit(EXIT_FAILURE);
	}
	//current image filename
	string fn(fistFrameFilename);
	//read input data. ESC or 'q' for quitting
	while ((char)keyboard != 'q' && (char)keyboard != 27){
		//update the background model
		//ALSO HERE!!!!
		pMOG->operator()(frame, fgMaskMOG);
		pMOG2->operator()(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		size_t index = fn.find_last_of("/");
		if (index == string::npos) {
			index = fn.find_last_of("\\");
		}
		size_t index2 = fn.find_last_of(".");
		string prefix = fn.substr(0, index + 1);
		string suffix = fn.substr(index2);
		string frameNumberString = fn.substr(index + 1, index2 - index - 1);
		istringstream iss(frameNumberString);
		int frameNumber = 0;
		iss >> frameNumber;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG", fgMaskMOG);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		keyboard = waitKey(30);
		//search for the next image in the sequence
		ostringstream oss;
		oss << (frameNumber + 1);
		string nextFrameNumberString = oss.str();
		string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		//read the next frame
		frame = imread(nextFrameFilename);
		if (!frame.data){
			//error in opening the next image in the sequence
			cerr << "Unable to open image frame: " << nextFrameFilename << endl;
			exit(EXIT_FAILURE);
		}
		//update the path of the current frame
		fn.assign(nextFrameFilename);
	}
}


// int main(){
// 	//cv::VideoCapture cap("2.avi");
// 	cv::Mat backImage, background, foreground, result;
// 	cv::Mat hsvBackImage, hsvBackground, hsvForeground, hsvResult; 
// 	vector<Mat> hsvBackImagePlanes, hsvBackPlanes, hsvForePlanes, hsvResultPlanes;
// 	cv::VideoCapture capture(0); namedWindow("result"); int key = 0;
// 	
// 	backImage = imread("backimage.jpg"); cvtColor(backImage, hsvBackImage, CV_BGR2HSV); split(hsvBackImage, hsvBackImagePlanes);
// 	
// 	
// 	capture >> background; 
// 	cv::Mat background_capture;
// 	cv::imwrite("background.jpg", background);
// 	background_capture = imread("background.jpg");
// 	
// 	cvtColor(background_capture, hsvBackground, CV_BGR2HSV); split(hsvBackground, hsvBackPlanes);
// 	result = backImage.clone(); hsvResult = hsvBackImage.clone(); split(hsvResult, hsvResultPlanes);
// 	
// 	while (true){
// 		capture >> foreground; cvtColor(foreground, hsvForeground, CV_BGR2HSV);
// 		split(hsvForeground, hsvForePlanes);
// 		for (int row = 0; row < foreground.rows; ++row)
// 			for (int column = 0; column < foreground.cols; ++column){
// 				if (hsvForePlanes[0].at<uchar>(row, column) != hsvBackPlanes[0].at<uchar>(row, column)) { 
// 					hsvResultPlanes[0].at<uchar>(row, column) = hsvForePlanes[0].at<uchar>(row, column);
// 					hsvResultPlanes[1].at<uchar>(row, column) = hsvForePlanes[1].at<uchar>(row, column);
// 					hsvResultPlanes[2].at<uchar>(row, column) = hsvForePlanes[2].at<uchar>(row, column);
// 				}
// 				else {
// 					hsvResultPlanes[0].at<uchar>(row, column) = hsvBackImagePlanes[0].at<uchar>(row, column);
// 					hsvResultPlanes[1].at<uchar>(row, column) = hsvBackImagePlanes[1].at<uchar>(row, column);
// 					hsvResultPlanes[2].at<uchar>(row, column) = hsvBackImagePlanes[2].at<uchar>(row, column);
// 				}
// 
// 			}
// 		merge(hsvResultPlanes, hsvResult);
// 		cvtColor(hsvResult, result, CV_HSV2BGR);
// 		
// 		imshow("result", result);
// 		key = cv::waitKey(10);
// 	}
// 
// 	return 0;
// }

// void chromakey(const Mat under, const Mat over, Mat *dst, const Scalar& color) {
// 
// 	// Create the destination matrix
// 	*dst = Mat(under.rows, under.cols, CV_8UC3);
// 
// 	for (int y = 0; y < 480; y++) {
// 		for (int x = 0; x < 640; x++) {
// 
// 			if (over.at<Vec3b>(y, x)[0] >= red_l && over.at<Vec3b>(y, x)[0] <= red_h && over.at<Vec3b>(y, x)[1] >= green_l && over.at<Vec3b>(y, x)[1] <= green_h && over.at<Vec3b>(y, x)[2] >= blue_l && over.at<Vec3b>(y, x)[2] <= blue_h)
// 			{
// 				dst->at<Vec3b>(y, x)[0] = under.at<Vec3b>(y, x)[0];
// 				dst->at<Vec3b>(y, x)[1] = under.at<Vec3b>(y, x)[1];
// 				dst->at<Vec3b>(y, x)[2] = under.at<Vec3b>(y, x)[2];
// 			}
// 			else{
// 				dst->at<Vec3b>(y, x)[0] = over.at<Vec3b>(y, x)[0];
// 				dst->at<Vec3b>(y, x)[1] = over.at<Vec3b>(y, x)[1];
// 				dst->at<Vec3b>(y, x)[2] = over.at<Vec3b>(y, x)[2];
// 			}
// 
// 		}
// 	}
// }

